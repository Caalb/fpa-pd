/**
 * ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
 * üìö SOLU√á√ÉO APENAS COM PROGRAMA√á√ÉO DIN√ÇMICA - LCS (Longest Common Subsequence)
 * ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
 *
 * üë• AUTORES DO GRUPO:
 * - Carlos Ferreira

 *
 * üìã INFORMA√á√ïES DO PROJETO:
 * - Disciplina: Fundamentos de Projeto e An√°lise de Algoritmos
 * - Vers√£o: 1.0
 * - Data: 2025-06-23
 * - Linguagem: TypeScript
 *
 * üéØ OBJETIVO:
 * Este arquivo implementa APENAS a solu√ß√£o com programa√ß√£o din√¢mica,
 * encontrando o comprimento da LCS e UMA das subsequ√™ncias poss√≠veis.
 *
 * ‚ö†Ô∏è LIMITA√á√ÉO:
 * Esta vers√£o N√ÉO encontra TODAS as LCS, apenas uma delas.
 * Para encontrar todas, √© necess√°rio o backtracking (arquivo separado).
 */

/**
 * üßÆ Calcula o comprimento da maior subsequ√™ncia comum usando programa√ß√£o din√¢mica
 *
 * @param string1 - Primeira sequ√™ncia
 * @param string2 - Segunda sequ√™ncia
 * @returns Comprimento da LCS
 */
function calculateLCSLength(string1: string, string2: string): number {
  const m = string1.length;
  const n = string2.length;

  // Criar tabela DP
  const dp: number[][] = Array(m + 1)
    .fill(null)
    .map(() => Array(n + 1).fill(0));

  // Preencher tabela
  for (let i = 1; i <= m; i++) {
    for (let j = 1; j <= n; j++) {
      if (string1[i - 1] === string2[j - 1]) {
        dp[i][j] = dp[i - 1][j - 1] + 1;
      } else {
        dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);
      }
    }
  }

  return dp[m][n];
}

/**
 * üèóÔ∏è Constr√≥i a tabela DP completa
 *
 * @param string1 - Primeira sequ√™ncia
 * @param string2 - Segunda sequ√™ncia
 * @returns Tabela DP preenchida
 */
function buildDPTable(string1: string, string2: string): number[][] {
  const m = string1.length;
  const n = string2.length;

  const dp: number[][] = Array(m + 1)
    .fill(null)
    .map(() => Array(n + 1).fill(0));

  for (let i = 1; i <= m; i++) {
    for (let j = 1; j <= n; j++) {
      if (string1[i - 1] === string2[j - 1]) {
        dp[i][j] = dp[i - 1][j - 1] + 1;
      } else {
        dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);
      }
    }
  }

  return dp;
}

/**
 * üîÑ Reconstr√≥i UMA das LCS poss√≠veis (n√£o todas)
 *
 * @param string1 - Primeira sequ√™ncia
 * @param string2 - Segunda sequ√™ncia
 * @param dp - Tabela DP j√° constru√≠da
 * @returns Uma das LCS poss√≠veis
 */
function reconstructOneLCS(
  string1: string,
  string2: string,
  dp: number[][]
): string {
  let i = string1.length;
  let j = string2.length;
  const result: string[] = [];

  while (i > 0 && j > 0) {
    if (string1[i - 1] === string2[j - 1]) {
      result.unshift(string1[i - 1]);
      i--;
      j--;
    } else if (dp[i - 1][j] > dp[i][j - 1]) {
      i--;
    } else {
      j--;
    }
  }

  return result.join("");
}

/**
 * üìã FUN√á√ÉO PRINCIPAL: Processa entrada no formato do roteiro APENAS COM DP
 *
 * ‚ö†Ô∏è LIMITA√á√ÉO IMPORTANTE:
 * Esta vers√£o retorna apenas UMA LCS por conjunto, n√£o todas.
 * Isso √© uma limita√ß√£o da programa√ß√£o din√¢mica pura.
 *
 * @param input - Entrada no formato: D\nstring1\nstring2\n...
 * @returns Sa√≠da formatada (mas com apenas uma LCS por conjunto)
 */
function processWithDynamicProgrammingOnly(input: string): string {
  const lines = input.trim().split("\n");
  const D = parseInt(lines[0]);

  if (isNaN(D) || D <= 0 || D > 10) {
    throw new Error(`N√∫mero de conjuntos inv√°lido: ${lines[0]}`);
  }

  const results: string[] = [];

  for (let i = 0; i < D; i++) {
    const helena = lines[1 + i * 2]?.trim();
    const marcus = lines[2 + i * 2]?.trim();

    if (!helena || !marcus) {
      throw new Error(`Conjunto ${i + 1}: sequ√™ncias inv√°lidas`);
    }

    // Validar entrada
    if (helena.length > 80 || marcus.length > 80) {
      throw new Error(`Conjunto ${i + 1}: sequ√™ncias muito longas`);
    }

    if (!/^[a-z]+$/.test(helena) || !/^[a-z]+$/.test(marcus)) {
      throw new Error(`Conjunto ${i + 1}: apenas letras min√∫sculas permitidas`);
    }

    // Processar com DP
    const dp = buildDPTable(helena, marcus);
    const oneLCS = reconstructOneLCS(helena, marcus, dp);

    // ‚ö†Ô∏è LIMITA√á√ÉO: Apenas uma LCS, n√£o todas
    if (oneLCS) {
      results.push(oneLCS);
    }
  }

  return results.join("\n\n");
}

/**
 * üß™ Fun√ß√£o para testar a solu√ß√£o apenas com DP
 */
function testDynamicProgrammingOnly(): void {
  console.log("üß™ TESTANDO SOLU√á√ÉO APENAS COM PROGRAMA√á√ÉO DIN√ÇMICA");
  console.log("‚ö†Ô∏è  LIMITA√á√ÉO: Esta vers√£o encontra apenas UMA LCS, n√£o todas");
  console.log();

  const testInput = "1\nijkijkii\nikjikji";

  try {
    const result = processWithDynamicProgrammingOnly(testInput);
    console.log("üì• ENTRADA:");
    console.log(testInput);
    console.log();
    console.log("üì§ SA√çDA (apenas uma LCS):");
    console.log(result);
    console.log();
    console.log("‚úÖ Teste executado com sucesso!");
    console.log(
      "üìù Nota: Para encontrar TODAS as LCS, use o arquivo com backtracking."
    );
  } catch (error) {
    console.error("‚ùå Erro no teste:", error);
  }
}

// üöÄ Executar teste se arquivo for executado diretamente
if (import.meta.url === `file://${process.argv[1]}`) {
  testDynamicProgrammingOnly();
}

// Exportar fun√ß√µes para uso em outros m√≥dulos
export {
  calculateLCSLength,
  buildDPTable,
  reconstructOneLCS,
  processWithDynamicProgrammingOnly,
  testDynamicProgrammingOnly,
};
